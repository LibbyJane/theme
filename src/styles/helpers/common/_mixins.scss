@mixin button-default {
    @include font-size($button-text);
    backface-visibility: hidden;
    background: $secondary;
    border :0;
    border-radius: 0;
    color: $white;
    cursor: pointer;
    display: inline-flex;
        align-items: center;
        justify-content: center;
    font-family: $font-heading;
    font-weight: 600;
    line-height: 1;
    opacity: 1;
    // overflow: hidden;
    padding: $button-padding;
    position: relative;
    transition: background $ts $tt;
    text-align: center;
    text-transform: uppercase;
    width: auto;
    z-index: 1;

    #{$hover} {
        background: $accent;
        color: $white;
    }


    .icon {
        &:first-child {
            margin-right: 0.5rem;
        }

        &:last-child {
            margin-left: 0.5rem;
        }
    }
}

@mixin image-hover {
    backface-visibility: hidden;
    filter: brightness(1.1);
    transform: scale(1.05);

}

@mixin styled-image {
    background: {
        size: cover;
        position: center;
    }
    border-radius: 50%;
    overflow: hidden;
    padding: 0;
    padding-top: 100%;
    position: relative;

    img {
        @include absolute-center;
        opacity: 0;
    }
}

@mixin underline-base {
    position: relative;

    &::after {
        background: $accent;
        content: '';
        height: 3px;
        width: 4rem;
        position: absolute;
    }
}

@mixin checkout-fw {
    background: transparentize($bg, 0.5);
    border: $border-width solid transparentize($accent, 0.93);
    color: $accent;
    padding: var(--space) var(--h-space);
}

@mixin underline {
    @include underline-base;

    &::after {
        background: $accent;
        content: '';
        height: 3px;
        width: 1.5rem;
        margin: 0;
        bottom: 0;
        left: 0;
    }
}

@mixin animated-underline($position: center) {
    @include underline-base;

    &::after {
        background: $accent;
        content: '';
        height: 3px;
        width: 4rem;
        margin: 0 auto;
        position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
        transform: scaleX(0) translateY(var(--v-space));
        transition: all $ts ease;

        @if $position == left {
            right: auto;
            width: 3rem;
            transform: scaleX(0) translateY(0.2rem);
            transform-origin: center left;
        }
    }

    #{$hover} {
        &::after {
            transform: scaleX(1) translateY(var(--v-space));

            @if $position == left {
                transform: scaleX(1) translateY(0.2rem);
            }
        }
    }
}


@mixin disabled {
    filter: grayscale(1);
    opacity: 0.6;
    pointer-events: none;
}

@mixin sharp-text {
    backface-visibility: hidden;
    transform: translateZ(0);
    -webkit-font-smoothing: subpixel-antialiased;
}

// Font sizes
@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {
    @each $fs-breakpoint, $fs-font-size in $fs-map {
        @if $fs-breakpoint == default {
            font-size: $fs-font-size;
        }

        @else {
            @if map-has-key($fs-breakpoints, $fs-breakpoint) {
                $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
            }
            @media screen and (min-width: $fs-breakpoint) {
                font-size: $fs-font-size;
            }
        }
    }
}

// for elements that need to go full screen width
@mixin full-width {
    width: 100vw;
    position: relative;
    left: 50%;
    right: 50%;
    margin-left: -50vw;
    margin-right: -50vw;
}

@mixin reset-list {
    list-style: none;
    margin: 0;
    padding: 0;
}

@mixin hide {
    max-height: 0;
    opacity: 0;
    overflow: hidden;
    pointer-events: none;
    transition: all $ts $tt;

    input {
        transform: translateX(1000vw); // last pass injects some difficult to hide icons etc
    }
}

@mixin show {
    max-height: 200vh;
    opacity: 1;
    overflow: visible;
    pointer-events: all;

    input {
        transform: translateX(0);
    }
}

@mixin greyscale($percentage) {
    -webkit-filter: grayscale($percentage); /* Safari 6.0 - 9.0 */
    filter: grayscale($percentage);
}

@mixin placeholder {
    $placeholders: ":-webkit-input" ":-moz" "-moz" "-ms-input";

    @each $placeholder in $placeholders {
        &:#{$placeholder}-placeholder {
            @content;
        }
    }
}

@mixin size($size) {
    height: $size;
    width: $size;
}

@mixin triangle-up($size, $color) {
    width: 0;
    height: 0;
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom:$size solid $color;
}

@mixin triangle-down($size, $color) {
    width: 0;
    height: 0;
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
}

@mixin triangle-left($size, $color) {
    width: 0;
    height: 0;
    border-top: $size solid transparent;
    border-right: $size solid $color;
    border-bottom: $size solid transparent;
}

@mixin triangle-right ($size, $color) {
    display: inline-block;
    width: 0;
    height: 0;
    border-style: solid;
    border-width: $size 0 $size $size*1.5;
    border-color: transparent transparent transparent $color;
}

@mixin sr-only {
    border: 0;
    clip: rect(0 0 0 0);
    overflow: hidden;
    position: absolute;
    height: 1px;
    width: 1px;
    margin: -1px;
    padding: 0;
}

// Media queries / breakpoints
@mixin breakpoint($breakpoint, $max-width: false) {
    @if map-has-key($breakpoints, $breakpoint) {
        @if ($max-width){
            $breakpointWidth: map-get($breakpoints, #{$breakpoint});

            @media (max-width: #{$breakpointWidth - 1px}) {
                @content;
            }
        }

        @else {
            @media (min-width: #{map-get($breakpoints, $breakpoint)}) {
                @content;
            }
        }
    }

    @else {
        @warn "`#{$breakpoint}` could not be found in `$breakpoints` map.";
    }
}

@mixin mwbreakpoint($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        $breakpointWidth: map-get($breakpoints, #{$breakpoint});

        @media (max-width: #{$breakpointWidth - 1px}) {
            @content;
        }
    }

    @else {
        @warn "`#{$breakpoint}` could not be found in `$breakpoints` map.";
    }
}

@mixin breakpoint-test {
    $colors: tomato orange gold YellowGreen RoyalBlue purple Magenta;

    @each $breakpoint in $breakpoints {
        $index: index($breakpoints, $breakpoint);
        $color: nth($colors, $index);

        // passing the just breakpoint name (but not the value) to the breakpoint mixin
        @include breakpoint(nth($breakpoint, 1)) {
            outline: 5px solid $color;

            &::before {
                content: nth($breakpoint, 1);
                background: black;
                color: white;
                display: block;
                position: absolute;
                    top: 0;
                    left: 0;
                padding: 0.5rem;
            }
        }
    }
}



@mixin hover-highlight($z-index: 1) {
    --rotation: -1deg;

    &:nth-child(2n) {
        --rotation: -2deg;
    }

    &:nth-child(3n) {
        --rotation: 1deg;
    }

    position: relative;
    z-index: $z-index;

    &:hover,
    &:focus {
        &::before {
            transition: transform var(--duration-long) var(--transition-type);
            transform: rotate(var( --rotation)) scaleX(1);
        }
    }

    &::before {
        background: rgba(var(--color-highlight), var(--highlight-opacity));
        border-radius: var(--button-border-radius);
        content: '';
        margin: -2px;
        position: absolute;
            inset: 0;
        transform: rotate(-1deg) scaleX(0);
        transform-origin: center left;
        transition-delay: 100ms;
        z-index: -1;
    }
}


@mixin underlined-link {
    --underline-height: 0.2px;

    position: relative;
    z-index: 1;

    &:hover,
    &:focus {
        --alpha-link: 1;
        --underline-height: 1px;

        &::before {
            transform: rotate(-0.25deg) scaleX(1);
        }

        &::after {
            transform: rotate(0.25deg) scaleX(1);
            // transform: scaleX(0.8);
            // animation: scaleOutX40 var(--duration-medium) var(--transition-type) forwards;
            // transform-origin: bottom center;
            // opacity: 1;
        }
    }

    &::before,
    &::after {
        content: '';
        background-color: rgba(var(--color-link), var(--alpha-link));
        // border: var(--underline-height) solid rgba(var(--color-link), var(--alpha-link));
        position: absolute;
            bottom: calc(var(--underline-height) * -1);
            left: 0;
        height: var(--underline-height);
        width: 100%;
        transition: transform var(--duration-medium) var(--transition-type);
        transform: rotate(0.25deg) scaleX(0.95);
        z-index: -1;

        // --height: 3px;
        // transform: translate3d(0px,0px,0px);

        // // animation: scaleX100 var(--duration-medium) var(--transition-type) forwards;
        // background-color: rgba(var(--color-link), var(--alpha-link));
        // content: '';
        // flex: 0 0 auto;
        // mask-image: url(mask-underline.svg?v=2);
        // mask-size: cover;
        // mask-repeat: no-repeat;
        // mask-position: bottom left;
        // margin: 0 auto;
        // position: absolute;
        // bottom: calc(var(--height) * -1);
        // right: 0;
        // left: 0;
        // width: auto;
        // height: var(--height);
        // opacity: 0.6;
        // shape-rendering: crispEdges;
        // transform: scaleX(0.5);
        // transform-origin: bottom center;
        // transition: transform var(--duration-medium) var(--transition-type);
        // z-index: -1;
    }

    &::before {
        transition-delay: var(--duration-short);
        transform: rotate(-0.5deg) scaleX(0);
        transform-origin: bottom left;
    }
}

@mixin underline-child-on-hover($underline-inline-offset: 0, $underline-bottom-offset: 0) {
    >:first-child {
        display: flex;
        position: relative;
        z-index: 1;

        &::after {
            animation: scaleOutX100 var(--duration-medium) var(--transition-type) forwards;
            mask-image: url(mask-underline.svg?v=4);
            mask-size: auto 2px;
            mask-repeat: repeat;
            mask-position: bottom center;
            background-color: rgba(var(--color-link), var(--alpha-link));
            content: '';
            position: absolute;
            right: $underline-inline-offset;
            bottom: $underline-bottom-offset;
            left: $underline-inline-offset;
            height: 1.5px;
            z-index: -1;
            transform: scaleX(0);
            transform-origin: bottom left;
            shape-rendering: crispEdges;
            vector-effect: non-scaling-stroke;
        }
    }


    &:hover,
    &:focus {
        >:first-child {
            &::after {
                animation: scaleX100 var(--duration-medium) var(--transition-type) forwards;
            }
        }
    }
}

@mixin underline-on-hover($underline-inline-offset: 0, $underline-bottom-offset: 0) {
    position: relative;
    z-index: 1;

    &:hover,
    &:focus {
        &::after {
            animation: scaleX100 var(--duration-medium) var(--transition-type) forwards;
        }
    }

    &::after {
        animation: scaleOutX100 var(--duration-medium) var(--transition-type) forwards;
        mask-image: url(mask-underline.svg);
        mask-size: cover;
        mask-repeat: no-repeat;
        mask-position: bottom left;
        background-color: rgba(var(--color-link), var(--alpha-link));
        content: '';
        position: absolute;
            right: $underline-inline-offset;
            bottom: $underline-bottom-offset;
            left: $underline-inline-offset;
        height: 2px;
        z-index: -1;
        transform: scaleX(0);
        transform-origin: bottom left;
    }
}

// @mixin scrollbars($size, $foreground-color, $background-color: mix($foreground-color, white,  50%)) {
//     // For Google Chrome
//     ::-webkit-scrollbar {
//         width:  $size;
//         height: $size;
//     }

//     ::-webkit-scrollbar-thumb {
//         background: $foreground-color;
//     }

//     ::-webkit-scrollbar-track {
//         background: $background-color;
//     }
// }


@mixin scrollbars() {
    overflow-x: hidden;
    overflow-y: auto;
    scrollbar-width: auto;
    scrollbar-color: rgba(var(--color-foreground), 0.2) rgba(var(--color-background), 0.8);

    /* Chrome, Edge, and Safari */
    &::-webkit-scrollbar {
        width: 12px;
        scrollbar-width: thin;
    }

    &::-webkit-scrollbar-track {
        background: transparent url('bg-scrollbar.png?v=2') repeat-y !important;
        background-size: contain;
    }

    &::-webkit-scrollbar-thumb {
        background-color: rgba(var(--color-foreground), 0.2);
        border-radius: 8px;
        border: 2px solid rgba(var(--color-background), 1);
    }
}

@mixin text-body {
    font-size: var(--font-size-base) ;
    letter-spacing: var(--letter-spacing);
    line-height: calc(1 + 0.4 / max(1, var(--font-heading-scale)));
}

@mixin text-heading {
    font-family: var(--font-heading-family);
    font-style: var(--font-heading-style);
    font-weight: var(--font-heading-weight);
    // letter-spacing: calc(var(--font-heading-scale) * 0.06rem);
    color: rgb(var(--color-foreground));
    line-height: calc(1 + 0.3 / max(1, var(--font-heading-scale)));
    word-break: break-word;
}

@mixin disabled {
    &:not([disabled="false"]) { // shopify-buy-it-now button needs the :not
        filter: grayscale(1);
        pointer-events: none;
        opacity: 0.6;
    }
}

@mixin default-texture {
    background-color: rgb(var(--color-background));
    background-blend-mode: multiply;
    background-image: url('texture-paper.jpg?v=3'), var(--background-gradient);
    background-position: top center, center;
    background-repeat: repeat;
    background-size: 200px auto, cover;
}

:root {
    --corner-shadow-alpha: 0.5;
    --corner-size: 15px;
    --corner-offset: calc(var(--corner-size) * -1 - var(--space-sm));
}

@mixin corners($offset: var(--corner-offset)) {
    position: relative;

    &::before,
    &::after {
        // border: var(--corner-size) solid transparent;
        // transform: rotate(135deg);
        background: rgba(var(--color-shadow), var(--corner-shadow-alpha));
        content: "";
        filter: blur(5px);
        height: 3rem;
        mix-blend-mode: color-burn;
        pointer-events: none;
        position: absolute;
        transform-origin: center;
        width: 3rem;
        z-index: 1;
    }

    &::before {
        top: 0;
        left: 0;
        transform: rotate(45deg) scaleX(0.05) scaleY(0.66) translate(-950%, -0%);
    }

    &::after {
        bottom: 0;
        right: 0;
        transform: rotate(45deg) scaleX(0.05) scaleY(0.66) translate(950%, 0%);

    }
}

:root {
    --tape-color: hsl(53, 15%, 80%);
    --tape-edge-color: hsl(53, 15%, 67%);
    --tape-height: 4rem;
  }

@mixin tape($position: top, $alignment: center, $angle: 0, $width: 8rem) {
    position: relative;

    &::after {
        content: '';
        position: absolute;
            left: 0;
            right: 0;
            width: $width;
            height: var(--tape-height);
        background-color: var(--tape-color);
        border-right: 1px dotted var(--tape-edge-color);
        border-left: 1px dotted var(--tape-edge-color);
        opacity: 0.4;
        transform: rotate(#{$angle}deg);

        @if $position == top {
            top: calc(var(--tape-height) * -0.5);
        } @else {
            bottom: calc(var(--tape-height) * -0.5);
        }

        @if $alignment == center {
            margin-left: auto;
            margin-right: auto;
        }
        @else if $alignment == left {
            margin-left: 0;
            margin-right: auto;
        } @else {
            margin-left: auto;
            margin-right: 0;
        }
    }
}